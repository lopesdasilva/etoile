# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.StudentController.index()
GET		/index						controllers.Application.index()
GET		/						controllers.ProfessorController.index()

# Authentication
GET     /login                              controllers.Application.login()
POST    /login                              controllers.Application.authenticate()
GET     /logout                             controllers.Application.logout()
GET		/register							controllers.Register.register2()
POST	/register							controllers.Register.register()

#User
GET		/myprofile							controllers.ProfessorController.myprofile()
POST	/myprofile/addprofilecontent		controllers.ProfessorProfileController.addprofilecontent()
GET		/myprofile/deleteprofilecontent		controllers.ProfessorProfileController.deleteprofilecontent(content: Long)
POST	/myprofile/editprofilecontent		controllers.ProfessorProfileController.editprofilecontent(content: Long)
POST	/myprofile/editprofilecontact		controllers.ProfessorProfileController.editprofilecontact()
POST	/myprofile/editprofil				controllers.ProfessorProfileController.editprofile()


#Static pages
GET		/about						controllers.Application.about()
GET		/contact					controllers.Application.contact()
GET		/curriculum					controllers.Application.curriculum()
GET		/digitalcampus					controllers.Application.digitalcampus()

#Blog
GET		/news							controllers.Application.news()
GET		/news:blog						controllers.BlogController.blog(blog: Long)
POST	/news:blog/postcomment			controllers.BlogController.postcomment(blog: Long)

#Professors
GET		/professors/:professor			controllers.Application.professorprofile(professor: String)




#Admin
GET		/admin							controllers.Administration.index()
GET		/admin/createblog				controllers.Administration.createblog()
POST	/admin/addblog					controllers.Administration.addblog()
GET		/admin/removeblog				controllers.Administration.removeblog(blog: Long)
GET		/admin/removeuser				controllers.Administration.removeuser(email: String)

#Mark Answers
GET		/answerstomark						controllers.StudentMarkerController.answersToMark()
GET		/answerstomark/answer:answer		controllers.StudentMarkerController.answerToMark(answer: Long)
POST    /answerstomark/answer:answer/postevaluation controllers.StudentMarkerController.markanswer(answer: Long)
GET		/modules/:module/:lesson/testanalysis:test/:question		controllers.StudentTestController.questionanalysis(question: Long,test: Long, lesson: String,module: String)

#Modules
##CHECK THIS ROUTE
GET		/modules						controllers.Application.modules()
GET  	/modules/:module					controllers.Application.module(module: String)
GET	/modules/:module/signup				controllers.StudentController.signupmodule(module: String)
GET    /:continent          controllers.Application.continent(continent: String)
GET  	/modules/:module/lessons/:lesson					controllers.Application.lesson(module: String, lesson: String)

#Professor Module
GET /modules/:module/deletebibliographyitem controllers.ProfessorModuleController.deletebibliographyitem(module: String, bibliography: Long)
POST /modules/:module/editbibliographyitem	controllers.ProfessorModuleController.editbibliographyitem(module: String, bibliography: Long)
POST /modules/:module/addbibliographyitem	controllers.ProfessorModuleController.addbibliographyitem(module: String)
POST /module/:module/editmoduletitle		controllers.ProfessorModuleController.editmoduletitle(module: String)
POST /module/:module/editmoduledescription		controllers.ProfessorModuleController.editmoduledescription(module: String)
POST /module/:module/editmoduledcontent		controllers.ProfessorModuleController.editmoduledcontent(module: String, content: Long)
POST /module/:module/addmoduledcontent		controllers.ProfessorModuleController.addmoduledcontent(module: String)
GET /module/:module/deletemodulecontent		controllers.ProfessorModuleController.deletemodulecontent(module: String, content: Long)
GET /modules/:module/:lesson/test:test				controllers.ProfessorTestController.test(module: String, lesson:String, test: Long)
GET	/modules/:module/:lesson/test:usertest/grade:question	controllers.ProfessorTestController.gradetest(module: String, lesson: String, usertest:Long, question:Long)
POST /modules/:module/:lesson/test:usertest/grade:question/markanswer	controllers.ProfessorTestController.markanswer(module: String, lesson: String, usertest:Long, question:Long, question_id: Long)
GET /modules/:module/:lesson/test:test/submitreviewedtest  controllers.ProfessorTestController.submitreviewedtest(module: String, lesson:String, test: Long, usertest: Long)
GET /modules/:module/lesson/:lesson/deletetest			controllers.ProfessorTestController.deletetest(test: Long ,module: String ,lesson: String )
POST /modules/:module/addlesson						controllers.ProfessorModuleController.addlesson(module: String)


#Professor Lesson
POST /modules/:module/lesson/:lesson/addlessonalert		controllers.ProfessorLessonController.addlessonalert(module: String, lesson: String)
POST /modules/:module/lesson/:lesson/addlessoncontent		controllers.ProfessorLessonController.addlessoncontent(module: String, lesson: String)		
POST /modules/:module/lesson/:lesson/editlesson			controllers.ProfessorLessonController.editlesson(module: String, lesson: String)
GET /modules/:module/lesson/:lesson/:question/deletequestion			controllers.ProfessorLessonController.deletequestion(module: String, lesson: String, question: Long )


#Professor Test
POST /modules/:module/:lesson/addtest		controllers.ProfessorTestController.addtest(module: String, lesson: String)
POST /modules/:module/:lesson/edittest/:test		controllers.ProfessorTestController.edittesttitle(module: String, lesson: String, test: Long)

GET /modules/:module/:lesson/edittest/:test		controllers.ProfessorTestController.edittest(module: String, lesson: String, test: Long)

GET /modules/:module/:lesson/edittest/:test/:group/addopenquestion	controllers.ProfessorTestController.addopenquestion(module: String, lesson: String, test: Long, group: Long)		
GET /modules/:module/:lesson/edittest/:test/addopenquestionform/:group	controllers.ProfessorTestController.addopenquestionform(module: String, lesson: String, test: Long, group: Long)		
GET /modules/:module/:lesson/edittest/:test/addgroup	controllers.ProfessorTestController.addgroup(module: String, lesson: String, test: Long)	
GET /modules/:module/:lesson/edittest/:test/deletegroup/:group	controllers.ProfessorTestController.deletegroup(module: String, lesson: String, test: Long,group: Long)		
GET /modules/:module/:lesson/edittest/:test/publish	controllers.ProfessorTestController.publish(module: String, lesson: String, test: Long)
GET /modules/:module/:lesson/edittest/:test/unpublish	controllers.ProfessorTestController.unpublish(module: String, lesson: String, test: Long)
GET /modules/:module/:lesson/edittest/:test/reusequestionadd	controllers.ProfessorTestController.reusequestionadd(module: String, lesson: String, test: Long, group: Long, question: Long)



		
#Curriculum Modules
GET /curriculum/category:category					controllers.Application.categoryModules(category: Long)

#Lessons
GET		/modules/:module/:lesson			controllers.StudentController.lesson(lesson: String, module: String)
POST 	/modules/:module/:lesson/addquestion 				controllers.StudentTestController.addquestion(test: Long, lesson: String, module: String)

#Tests
GET		/modules/:module/:lesson/test:test/:question		controllers.StudentTestController.question(question: Int,test: Long, lesson: String,module: String)


#Questions
POST    /modules/:module/:lesson/test:test/postquestion     controllers.StudentTestController.postquestion(question_number: Int, module: String, lesson: String, test: Long, question: Long)
GET		/modules/:module/:lesson/submitTest					controllers.StudentTestController.submitTest(test: Long,lesson: String,module: String)
GET 	/modules/:module/:lesson/test:test/:question/voteurl	controllers.StudentTestController.voteurl(url: Long, question: Int, test: Long, lesson: String, module: String)
POST	/modules/:module/:lesson/test:test/:question/addurl controllers.StudentTestController.addurl(question: Int, test: Long, lesson: String, module: String, question_id: Long)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
